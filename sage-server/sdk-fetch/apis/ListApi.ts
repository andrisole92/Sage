/* tslint:disable */
/* eslint-disable */
/**
 * Sage Recruitment
 * Simple List API with Nest.js
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddItemDTO,
    AddItemDTOFromJSON,
    AddItemDTOToJSON,
    ClearListDTO,
    ClearListDTOFromJSON,
    ClearListDTOToJSON,
    ListEntity,
    ListEntityFromJSON,
    ListEntityToJSON,
    ListItemEntity,
    ListItemEntityFromJSON,
    ListItemEntityToJSON,
    RemoveItemDTO,
    RemoveItemDTOFromJSON,
    RemoveItemDTOToJSON,
    ReorderListDTO,
    ReorderListDTOFromJSON,
    ReorderListDTOToJSON,
} from '../models';

export interface ListControllerAddItemRequest {
    addItemDTO: AddItemDTO;
}

export interface ListControllerClearRequest {
    clearListDTO: ClearListDTO;
}

export interface ListControllerFindOneRequest {
    id: string;
}

export interface ListControllerRemoveItemRequest {
    removeItemDTO: RemoveItemDTO;
}

export interface ListControllerReorderRequest {
    reorderListDTO: ReorderListDTO;
}

/**
 * no description
 */
export class ListApi extends runtime.BaseAPI {

    /**
     */
    async listControllerAddItemRaw(requestParameters: ListControllerAddItemRequest): Promise<runtime.ApiResponse<ListItemEntity>> {
        if (requestParameters.addItemDTO === null || requestParameters.addItemDTO === undefined) {
            throw new runtime.RequiredError('addItemDTO','Required parameter requestParameters.addItemDTO was null or undefined when calling listControllerAddItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/list/addItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddItemDTOToJSON(requestParameters.addItemDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListItemEntityFromJSON(jsonValue));
    }

    /**
     */
    async listControllerAddItem(requestParameters: ListControllerAddItemRequest): Promise<ListItemEntity> {
        const response = await this.listControllerAddItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listControllerClearRaw(requestParameters: ListControllerClearRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.clearListDTO === null || requestParameters.clearListDTO === undefined) {
            throw new runtime.RequiredError('clearListDTO','Required parameter requestParameters.clearListDTO was null or undefined when calling listControllerClear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/list/clear`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ClearListDTOToJSON(requestParameters.clearListDTO),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async listControllerClear(requestParameters: ListControllerClearRequest): Promise<boolean> {
        const response = await this.listControllerClearRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listControllerFindAllRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async listControllerFindAll(): Promise<void> {
        await this.listControllerFindAllRaw();
    }

    /**
     */
    async listControllerFindOneRaw(requestParameters: ListControllerFindOneRequest): Promise<runtime.ApiResponse<ListEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntityFromJSON(jsonValue));
    }

    /**
     */
    async listControllerFindOne(requestParameters: ListControllerFindOneRequest): Promise<ListEntity> {
        const response = await this.listControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listControllerPostRaw(): Promise<runtime.ApiResponse<ListEntity>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntityFromJSON(jsonValue));
    }

    /**
     */
    async listControllerPost(): Promise<ListEntity> {
        const response = await this.listControllerPostRaw();
        return await response.value();
    }

    /**
     */
    async listControllerRemoveItemRaw(requestParameters: ListControllerRemoveItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.removeItemDTO === null || requestParameters.removeItemDTO === undefined) {
            throw new runtime.RequiredError('removeItemDTO','Required parameter requestParameters.removeItemDTO was null or undefined when calling listControllerRemoveItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/list/removeItem`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveItemDTOToJSON(requestParameters.removeItemDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async listControllerRemoveItem(requestParameters: ListControllerRemoveItemRequest): Promise<void> {
        await this.listControllerRemoveItemRaw(requestParameters);
    }

    /**
     */
    async listControllerReorderRaw(requestParameters: ListControllerReorderRequest): Promise<runtime.ApiResponse<ListEntity>> {
        if (requestParameters.reorderListDTO === null || requestParameters.reorderListDTO === undefined) {
            throw new runtime.RequiredError('reorderListDTO','Required parameter requestParameters.reorderListDTO was null or undefined when calling listControllerReorder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/list/reorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReorderListDTOToJSON(requestParameters.reorderListDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntityFromJSON(jsonValue));
    }

    /**
     */
    async listControllerReorder(requestParameters: ListControllerReorderRequest): Promise<ListEntity> {
        const response = await this.listControllerReorderRaw(requestParameters);
        return await response.value();
    }

}
